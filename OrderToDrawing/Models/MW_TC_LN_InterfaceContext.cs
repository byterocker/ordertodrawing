// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using OrderToDrawing.Extensions;

namespace OrderToDrawing.Models;

public partial class MW_TC_LN_InterfaceContext : DbContext
{
    public MW_TC_LN_InterfaceContext()
    {
    }

    public MW_TC_LN_InterfaceContext(DbContextOptions<MW_TC_LN_InterfaceContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ACAD_GroupIdentificator> ACAD_GroupIdentificators { get; set; }

    public virtual DbSet<ACAD_SerialNumber> ACAD_SerialNumber { get; set; }

    public virtual DbSet<ACAD_TC_Imports> ACAD_TC_Importss { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer(Properties.Settings.Default.ConnectionString);
        //=> optionsBuilder.UseSqlServer("Data Source=DBAG92;Initial Catalog=MW_TC_LN_Interface;Integrated Security=True;Encrypt=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CS_AS_KS_WS");

        modelBuilder.Entity<ACAD_GroupIdentificator>(entity =>
        {
            entity.HasKey(e => new { e.ACAD_DrawingNo, e.PO_Number, e.Group_Identificator });

            entity.ToTable("ACAD_GroupIdentificator");

            entity.Property(e => e.ACAD_DrawingNo)
                .HasMaxLength(50)
                .HasColumnName("ACAD_DrawingNo");
            entity.Property(e => e.PO_Number)
                .HasMaxLength(10)
                .HasColumnName("PO_Number");
            entity.Property(e => e.Group_Identificator)
                .HasMaxLength(5)
                .HasColumnName("Group_Identificator");
            entity.Property(e => e.created)
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.modified)
                .HasColumnType("datetime")
                .HasColumnName("modified");
            entity.Property(e => e.Status).HasMaxLength(10);
            entity.Property(e => e.TC_SolutionID)
                .HasMaxLength(10)
                .HasColumnName("TC_SolutionID");
        });

        modelBuilder.Entity<ACAD_SerialNumber>(entity =>
        {
            entity.HasKey(e => new { e.PO_Number, e.PO_Position });

            entity.ToTable("ACAD_SerialNumber");

            entity.Property(e => e.PO_Number)
                .HasMaxLength(10)
                .HasColumnName("PO_Number");
            entity.Property(e => e.PO_Position)
                .HasMaxLength(10)
                .HasColumnName("PO_Position");
            entity.Property(e => e.Drawing_No)
                .HasMaxLength(30)
                .HasColumnName("Drawing_No");
            entity.Property(e => e.Item_Id)
                .HasMaxLength(30)
                .HasColumnName("Item_Id");
            entity.Property(e => e.PO_Sequence)
                .HasMaxLength(10)
                .HasColumnName("PO_Sequence");
            entity.Property(e => e.SerialNumber).HasMaxLength(10);
            entity.Property(e => e.SO_Position)
                .HasMaxLength(10)
                .HasColumnName("SO_Position");
            entity.Property(e => e.Status).HasMaxLength(10);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
        });

        modelBuilder.Entity<ACAD_TC_Imports>(entity =>
        {
            entity.HasKey(e => new { e.PO_Number, e.Drawing_Number, e.Create_DateTime });

            entity.ToTable("ACAD_TC_Imports");

            entity.Property(e => e.PO_Number)
                .HasMaxLength(10)
                .HasColumnName("PO_Number");
            entity.Property(e => e.Drawing_Number)
                .HasMaxLength(30)
                .HasColumnName("Drawing_Number");
            entity.Property(e => e.Create_DateTime)
                .HasColumnType("datetime")
                .HasColumnName("Create_DateTime");
            entity.Property(e => e.Status).HasMaxLength(10);
            entity.Property(e => e.Task).HasMaxLength(10);
            entity.Property(e => e.Update_DateTime)
                .HasColumnType("datetime")
                .HasColumnName("Update_DateTime");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

    // StringExtension IsMatch Methode für EF Core
    

    // EF Core Implementierung von getUnprocessedOrders
    public IEnumerable<ACAD_SerialNumber> GetUnprocessedOrders()
    {
        // Lade Bestellungen mit Status "new" oder "change" und einer Drawing_No
        var orders = ACAD_SerialNumber
            .Where(a => (a.Status == "new" || a.Status == "change") && a.Drawing_No != null)
            .ToList();        

        return orders;
    }

    // EF Core Implementierung von MarkInSQL
    public void MarkOrdersWithStatus(List<ACAD_SerialNumber> orders, string status)
    {
        foreach (var item in orders)
        {
            var found = ACAD_SerialNumber
                .FirstOrDefault(a =>
                    a.PO_Number == item.PO_Number &&
                    a.SerialNumber == item.SerialNumber &&
                    a.PO_Sequence == item.PO_Sequence &&
                    a.Status == item.Status &&
                    a.Item_Id == item.Item_Id &&
                    a.SO_Position == item.SO_Position);

            if (found != null)
            {
                found.Status = status;
            }
        }

        SaveChanges();
    }

    // EF Core Implementierung von SearchAndMoveTCRequestsDWG
    public List<ACAD_TC_Imports> GetNewTCRequests()
    {
        return ACAD_TC_Importss.Where(a => a.Status == "new").ToList();
    }

    // EF Core Implementierung um TC-Imports als erledigt zu markieren
    public void MarkTCRequestAsDone(string PO_Number, string Drawing_Number)
    {
        // Direkte SQL-Ausführung ersetzen durch EF Core API
        var requests = ACAD_TC_Importss
            .Where(a => a.PO_Number == PO_Number && a.Drawing_Number == Drawing_Number)
            .ToList();

        foreach (var request in requests)
        {
            request.Status = "done";
            request.Update_DateTime = DateTime.Now;
        }

        SaveChanges();
    }

    // EF Core Implementierung für GenerateObjectGroup
    public IQueryable<ACAD_GroupIdentificator> GetGroup_Identificators(string Drawing_No, string PO_Number)
    {
        return ACAD_GroupIdentificators
            .Where(a => a.ACAD_DrawingNo.ToUpper() == Drawing_No && a.PO_Number.ToUpper() == PO_Number);
    }

    // EF Core Implementierung zum Finden eines bestimmten Identifikators
    public ACAD_GroupIdentificator FindGroup_Identificator(string Group_Identificator, IQueryable<ACAD_GroupIdentificator> foundEntries)
    {
        return foundEntries
            .Where(b => b.Group_Identificator == Group_Identificator)
            .FirstOrDefault();
    }

    // EF Core Implementierung zum Hinzufügen eines neuen Eintrags
    public void AddGroup_Identificator(ACAD_GroupIdentificator newEntry)
    {
        ACAD_GroupIdentificators.Add(newEntry);
        SaveChanges();
    }

    // EF Core Implementierung zum Markieren bestehender Identifikatoren als ungültig
    public void MarkGroup_IdentificatorsAsInvalid(IQueryable<ACAD_GroupIdentificator> identifiers)
    {
        foreach (var item in identifiers)
        {
            item.Status = "invalid";
        }
        SaveChanges();
    }

    // EF Core Implementierung zum Aktualisieren eines Gruppenidentifikators
    public void UpdateGroup_Identificator(ACAD_GroupIdentificator entry, string objectId)
    {
        entry.modified = DateTime.Now;
        entry.TC_SolutionID = objectId;
        entry.Status = "valid";
        SaveChanges();
    }
}
